let contract;
let userAccount;
const contractAddress = "0xE0f7ba015aB9759b65f9157E7774AD1a75Fa49B1";

let nameNguoiChoi = "";
let soVeConLai = 0;
let soDaMua = [];

async function updateAccount() {
  const accounts = await ethereum.request({ method: "eth_requestAccounts" });
  userAccount = accounts[0];
}

async function login() {
  if (!window.ethereum) return alert("‚ö†Ô∏è C√†i MetaMask!");
  window.web3 = new Web3(window.ethereum);
  await updateAccount();
  contract = new web3.eth.Contract(abi, contractAddress);
  document.getElementById("veStatus").innerText = "‚úÖ ƒê√£ k·∫øt n·ªëi MetaMask!";

  const quanLy = await contract.methods.quanLy().call();
  if (userAccount.toLowerCase() === quanLy.toLowerCase()) {
    const adminArea = document.createElement("div");
    adminArea.innerHTML = `
      <hr>
      <h3>üßë‚Äçüíº Qu·∫£n l√Ω</h3>
      <button onclick="reset()">‚ôªÔ∏è Reset v√≤ng</button>
    `;
    document.body.appendChild(adminArea);
  }
}

function startBuying() {
  nameNguoiChoi = document.getElementById("nameInput").value.trim();
  const sl = parseInt(document.getElementById("veInput").value.trim());
  if (!nameNguoiChoi || isNaN(sl) || sl <= 0) return alert("‚ö†Ô∏è Nh·∫≠p ƒë√∫ng t√™n v√† s·ªë l∆∞·ª£ng v√©");
  soVeConLai = sl;
  soDaMua = [];
  document.getElementById("veStatus").innerText = `üéüÔ∏è C√≤n ${soVeConLai} v√© c·∫ßn ghi s·ªë`;
  document.getElementById("daMuaList").innerHTML = "";
}

async function buyTicket() {
  const number = parseInt(document.getElementById("numberInput").value.trim());
  if (isNaN(number) || number < 0 || number > 99) return alert("‚ö†Ô∏è Nh·∫≠p s·ªë t·ª´ 00‚Äì99");
  if (soVeConLai <= 0) return alert("‚úÖ B·∫°n ƒë√£ ghi ƒë·ªß v√©!");
  if (soDaMua.includes(number)) return alert("‚ö†Ô∏è B·∫°n ƒë√£ ch·ªçn s·ªë n√†y r·ªìi!");
  await updateAccount();
  try {
    await contract.methods.muaVe(nameNguoiChoi, number).send({ from: userAccount });
    soDaMua.push(number);
    soVeConLai--;
    document.getElementById("veStatus").innerText =
      soVeConLai > 0 ? `üéüÔ∏è C√≤n ${soVeConLai} v√© c·∫ßn ghi s·ªë` : `‚úÖ ƒê√£ ghi ƒë·ªß ${soDaMua.length} v√©`;
    const li = document.createElement("li");
    li.innerText = `üé´ S·ªë: ${number.toString().padStart(2, '0')}`;
    document.getElementById("daMuaList").appendChild(li);
  } catch (err) {
    console.error("‚ùå L·ªói ghi s·ªë:", err);
    alert("‚ùå Kh√¥ng th·ªÉ ghi s·ªë. Chi ti·∫øt xem console.");
  }
}

async function listPlayers() {
  try {
    const list = await contract.methods.xemDanhSachNguoiChoi().call();
    const ul = document.getElementById("playerList");
    ul.innerHTML = "";
    list.forEach(p => {
      const soStr = (p.cacSo || []).map(n => n.toString().padStart(2, '0')).join(', ');
      const li = document.createElement("li");
      li.innerText = `üë§ ${p.ten} - M√£: ${p.ma} - S·ªë ƒë√£ mua: [${soStr}]`;
      ul.appendChild(li);
    });
  } catch (err) {
    console.error("‚ùå Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi ch∆°i:", err);
  }
}

async function drawAndSpin() {
  await updateAccount();
  try {
    await contract.methods.quayXoSo().send({ from: userAccount });

    const spinner = document.getElementById("spinner");
    spinner.innerText = "--";
    let current = 0;
    const interval = setInterval(() => {
      spinner.innerText = String(current).padStart(2, "0");
      current = (current + 1) % 100;
    }, 40);

    setTimeout(async () => {
      clearInterval(interval);
      const so = await contract.methods.soTrung().call();
      console.log("üé≤ S·ªë random blockchain tr·∫£ v·ªÅ:", so);
      const [addr, ten, ma] = await contract.methods.xemNguoiThang().call();
      spinner.innerText = String(so).padStart(2, "0");
      const result = document.getElementById("resultText");
      if (addr === "0x0000000000000000000000000000000000000000") {
        result.innerText = `‚ùå Kh√¥ng c√≥ ng∆∞·ªùi th·∫Øng`;
      } else {
        result.innerText = `üéâ Ng∆∞·ªùi th·∫Øng: ${ten} (${ma})`;
      }
      const history = JSON.parse(localStorage.getItem("lichSu") || "[]");
      history.unshift({ so, ten, ma, thoiGian: new Date().toLocaleString() });
      localStorage.setItem("lichSu", JSON.stringify(history));
    }, 3000);
  } catch (err) {
    alert("‚ùå Kh√¥ng th·ªÉ quay s·ªë");
    console.error(err);
  }
}

function xemLichSu() {
  const history = JSON.parse(localStorage.getItem("lichSu") || "[]");
  const ul = document.getElementById("historyList");
  ul.innerHTML = "";
  history.forEach(item => {
    const li = document.createElement("li");
    li.innerText = `üïí ${item.thoiGian} ‚Äì S·ªë: ${item.so.padStart(2, "0")} ‚Äì ${item.ten || "Kh√¥ng ai tr√∫ng"} (${item.ma || "-"})`;
    ul.appendChild(li);
  });
}

async function reset() {
  await updateAccount();
  try {
    await contract.methods.resetXoSo().send({ from: userAccount });
    alert("‚ôªÔ∏è ƒê√£ reset v√≤ng quay!");
  } catch (err) {
    alert("‚ùå Reset th·∫•t b·∫°i!");
  }
}

window.addEventListener("load", login);
